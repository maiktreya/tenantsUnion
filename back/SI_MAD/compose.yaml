services:

  server:
    image: postgrest/postgrest:v12.2.8
    ports:
      - "3001:3000"
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PGRST_OPENAPI_SERVER_PROXY_URI: ${POSTGREST_API_URL}
      PGRST_DB_ANON_ROLE: ${POSTGRES_USER}
      PGRST_DB_SCHEMA: idealista_scrapper
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    build:
      context: ./build/postgreSQL
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./build/postgreSQL/init-scripts:/docker-entrypoint-initdb.d
      - /mnt/pgdata:/var/lib/postgresql/data
    command: >
      postgres -c shared_preload_libraries='pg_cron'
               -c cron.database_name='${POSTGRES_DB}'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped